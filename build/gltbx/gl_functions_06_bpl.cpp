/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_Indexs(
    boost::python::object const& py_c)
  {
    boost::python::extract<GLshort> c_proxy(py_c);
    GLshort c = c_proxy();
    glIndexs(c);
  }

  void
  gl_Indexub(
    boost::python::object const& py_c)
  {
    boost::python::extract<GLubyte> c_proxy(py_c);
    GLubyte c = c_proxy();
    glIndexub(c);
  }

  void
  gl_Indexdv(
    boost::python::object const& py_c)
  {
    boost_python::converter<GLdouble> c_proxy(
      "c", py_c, 0, true);
    const GLdouble* c = c_proxy.get();
    glIndexdv(c);
  }

  void
  gl_Indexfv(
    boost::python::object const& py_c)
  {
    boost_python::converter<GLfloat> c_proxy(
      "c", py_c, 0, true);
    const GLfloat* c = c_proxy.get();
    glIndexfv(c);
  }

  void
  gl_Indexiv(
    boost::python::object const& py_c)
  {
    boost_python::converter<GLint> c_proxy(
      "c", py_c, 0, true);
    const GLint* c = c_proxy.get();
    glIndexiv(c);
  }

  void
  gl_Indexsv(
    boost::python::object const& py_c)
  {
    boost_python::converter<GLshort> c_proxy(
      "c", py_c, 0, true);
    const GLshort* c = c_proxy.get();
    glIndexsv(c);
  }

  void
  gl_Indexubv(
    boost::python::object const& py_c)
  {
    boost_python::converter_str<GLubyte> c_proxy(
      "c", py_c, 0, true);
    const GLubyte* c = c_proxy.get();
    glIndexubv(c);
  }

  void
  gl_IndexMask(
    boost::python::object const& py_mask)
  {
    boost::python::extract<GLuint> mask_proxy(py_mask);
    GLuint mask = mask_proxy();
    glIndexMask(mask);
  }

  void
  gl_IndexPointer(
    boost::python::object const& py_type,
    boost::python::object const& py_stride,
    boost::python::object const& py_pointer)
  {
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost::python::extract<GLsizei> stride_proxy(py_stride);
    GLsizei stride = stride_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glIndexPointer(): const GLvoid* pointer");
  //  const GLvoid* pointer = 0;
  //  glIndexPointer(type, stride, pointer);
  }

  void
  gl_InitNames()
  {
    glInitNames();
  }

  void
  gl_InterleavedArrays(
    boost::python::object const& py_format,
    boost::python::object const& py_stride,
    boost::python::object const& py_pointer)
  {
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLsizei> stride_proxy(py_stride);
    GLsizei stride = stride_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glInterleavedArrays(): const GLvoid* pointer");
  //  const GLvoid* pointer = 0;
  //  glInterleavedArrays(format, stride, pointer);
  }

  GLboolean
  gl_IsEnabled(
    boost::python::object const& py_cap)
  {
    boost::python::extract<GLenum> cap_proxy(py_cap);
    GLenum cap = cap_proxy();
    return glIsEnabled(cap);
  }

  GLboolean
  gl_IsList(
    boost::python::object const& py_list)
  {
    boost::python::extract<GLuint> list_proxy(py_list);
    GLuint list = list_proxy();
    return glIsList(list);
  }

  GLboolean
  gl_IsTexture(
    boost::python::object const& py_texture)
  {
    boost::python::extract<GLuint> texture_proxy(py_texture);
    GLuint texture = texture_proxy();
    return glIsTexture(texture);
  }

  void
  gl_Lightf(
    boost::python::object const& py_light,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> light_proxy(py_light);
    GLenum light = light_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glLightf(light, pname, param);
  }

  void
  gl_Lighti(
    boost::python::object const& py_light,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> light_proxy(py_light);
    GLenum light = light_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glLighti(light, pname, param);
  }

  void
  gl_Lightfv(
    boost::python::object const& py_light,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> light_proxy(py_light);
    GLenum light = light_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glLightfv(light, pname, params);
  }

  void
  gl_Lightiv(
    boost::python::object const& py_light,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> light_proxy(py_light);
    GLenum light = light_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glLightiv(light, pname, params);
  }

  void
  gl_LightModelf(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glLightModelf(pname, param);
  }

  void
  gl_LightModeli(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glLightModeli(pname, param);
  }

  void
  gl_LightModelfv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glLightModelfv(pname, params);
  }

  void
  gl_LightModeliv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glLightModeliv(pname, params);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_06()
  {
    using namespace boost::python;
    def("glIndexs", gl_Indexs, (
      arg("c")));
    def("glIndexub", gl_Indexub, (
      arg("c")));
    def("glIndexdv", gl_Indexdv, (
      arg("c")));
    def("glIndexfv", gl_Indexfv, (
      arg("c")));
    def("glIndexiv", gl_Indexiv, (
      arg("c")));
    def("glIndexsv", gl_Indexsv, (
      arg("c")));
    def("glIndexubv", gl_Indexubv, (
      arg("c")));
    def("glIndexMask", gl_IndexMask, (
      arg("mask")));
    def("glIndexPointer", gl_IndexPointer, (
      arg("type"), arg("stride"), arg("pointer")));
    def("glInitNames", gl_InitNames);
    def("glInterleavedArrays", gl_InterleavedArrays, (
      arg("format"), arg("stride"), arg("pointer")));
    def("glIsEnabled", gl_IsEnabled, (
      arg("cap")));
    def("glIsList", gl_IsList, (
      arg("list")));
    def("glIsTexture", gl_IsTexture, (
      arg("texture")));
    def("glLightf", gl_Lightf, (
      arg("light"), arg("pname"), arg("param")));
    def("glLighti", gl_Lighti, (
      arg("light"), arg("pname"), arg("param")));
    def("glLightfv", gl_Lightfv, (
      arg("light"), arg("pname"), arg("params")));
    def("glLightiv", gl_Lightiv, (
      arg("light"), arg("pname"), arg("params")));
    def("glLightModelf", gl_LightModelf, (
      arg("pname"), arg("param")));
    def("glLightModeli", gl_LightModeli, (
      arg("pname"), arg("param")));
    def("glLightModelfv", gl_LightModelfv, (
      arg("pname"), arg("params")));
    def("glLightModeliv", gl_LightModeliv, (
      arg("pname"), arg("params")));
  }

}}} // namespace gltbx::gl::boost_python
