/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_Color4dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 4, true);
    const GLdouble* v = v_proxy.get();
    glColor4dv(v);
  }

  void
  gl_Color4fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 4, true);
    const GLfloat* v = v_proxy.get();
    glColor4fv(v);
  }

  void
  gl_Color4iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 4, true);
    const GLint* v = v_proxy.get();
    glColor4iv(v);
  }

  void
  gl_Color4sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 4, true);
    const GLshort* v = v_proxy.get();
    glColor4sv(v);
  }

  void
  gl_Color4ubv(
    boost::python::object const& py_v)
  {
    boost_python::converter_str<GLubyte> v_proxy(
      "v", py_v, 4, true);
    const GLubyte* v = v_proxy.get();
    glColor4ubv(v);
  }

  void
  gl_Color4uiv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLuint> v_proxy(
      "v", py_v, 4, true);
    const GLuint* v = v_proxy.get();
    glColor4uiv(v);
  }

  void
  gl_Color4usv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLushort> v_proxy(
      "v", py_v, 4, true);
    const GLushort* v = v_proxy.get();
    glColor4usv(v);
  }

  void
  gl_ColorMask(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLboolean> red_proxy(py_red);
    GLboolean red = red_proxy();
    boost::python::extract<GLboolean> green_proxy(py_green);
    GLboolean green = green_proxy();
    boost::python::extract<GLboolean> blue_proxy(py_blue);
    GLboolean blue = blue_proxy();
    boost::python::extract<GLboolean> alpha_proxy(py_alpha);
    GLboolean alpha = alpha_proxy();
    glColorMask(red, green, blue, alpha);
  }

  void
  gl_ColorMaterial(
    boost::python::object const& py_face,
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glColorMaterial(face, mode);
  }

  void
  gl_ColorPointer(
    boost::python::object const& py_size,
    boost::python::object const& py_type,
    boost::python::object const& py_stride,
    boost::python::object const& py_pointer)
  {
    boost::python::extract<GLint> size_proxy(py_size);
    GLint size = size_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost::python::extract<GLsizei> stride_proxy(py_stride);
    GLsizei stride = stride_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glColorPointer(): const GLvoid* pointer");
  //  const GLvoid* pointer = 0;
  //  glColorPointer(size, type, stride, pointer);
  }

  void
  gl_CopyPixels(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_height,
    boost::python::object const& py_type)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    glCopyPixels(x, y, width, height, type);
  }

  void
  gl_CopyTexImage1D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_internalFormat,
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_border)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLenum> internalFormat_proxy(py_internalFormat);
    GLenum internalFormat = internalFormat_proxy();
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLint> border_proxy(py_border);
    GLint border = border_proxy();
    glCopyTexImage1D(target, level, internalFormat, x, y, width, border);
  }

  void
  gl_CopyTexImage2D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_internalFormat,
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_height,
    boost::python::object const& py_border)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLenum> internalFormat_proxy(py_internalFormat);
    GLenum internalFormat = internalFormat_proxy();
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    boost::python::extract<GLint> border_proxy(py_border);
    GLint border = border_proxy();
    glCopyTexImage2D(target, level, internalFormat, x, y, width, height,
      border);
  }

  void
  gl_CopyTexSubImage1D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_xoffset,
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLint> xoffset_proxy(py_xoffset);
    GLint xoffset = xoffset_proxy();
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  }

  void
  gl_CopyTexSubImage2D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_xoffset,
    boost::python::object const& py_yoffset,
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_height)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLint> xoffset_proxy(py_xoffset);
    GLint xoffset = xoffset_proxy();
    boost::python::extract<GLint> yoffset_proxy(py_yoffset);
    GLint yoffset = yoffset_proxy();
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width,
      height);
  }

  void
  gl_CullFace(
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glCullFace(mode);
  }

  void
  gl_DeleteLists(
    boost::python::object const& py_list,
    boost::python::object const& py_range)
  {
    boost::python::extract<GLuint> list_proxy(py_list);
    GLuint list = list_proxy();
    boost::python::extract<GLsizei> range_proxy(py_range);
    GLsizei range = range_proxy();
    glDeleteLists(list, range);
  }

  void
  gl_DeleteTextures(
    boost::python::object const& py_n,
    boost::python::object const& py_textures)
  {
    boost::python::extract<GLsizei> n_proxy(py_n);
    GLsizei n = n_proxy();
    boost_python::converter<GLuint> textures_proxy(
      "textures", py_textures, 0, true);
    const GLuint* textures = textures_proxy.get();
    glDeleteTextures(n, textures);
  }

  void
  gl_DepthFunc(
    boost::python::object const& py_func)
  {
    boost::python::extract<GLenum> func_proxy(py_func);
    GLenum func = func_proxy();
    glDepthFunc(func);
  }

  void
  gl_DepthMask(
    boost::python::object const& py_flag)
  {
    boost::python::extract<GLboolean> flag_proxy(py_flag);
    GLboolean flag = flag_proxy();
    glDepthMask(flag);
  }

  void
  gl_DepthRange(
    boost::python::object const& py_zNear,
    boost::python::object const& py_zFar)
  {
    boost::python::extract<GLclampd> zNear_proxy(py_zNear);
    GLclampd zNear = zNear_proxy();
    boost::python::extract<GLclampd> zFar_proxy(py_zFar);
    GLclampd zFar = zFar_proxy();
    glDepthRange(zNear, zFar);
  }

  void
  gl_DrawArrays(
    boost::python::object const& py_mode,
    boost::python::object const& py_first,
    boost::python::object const& py_count)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    boost::python::extract<GLint> first_proxy(py_first);
    GLint first = first_proxy();
    boost::python::extract<GLsizei> count_proxy(py_count);
    GLsizei count = count_proxy();
    glDrawArrays(mode, first, count);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_02()
  {
    using namespace boost::python;
    def("glColor4dv", gl_Color4dv, (
      arg("v")));
    def("glColor4fv", gl_Color4fv, (
      arg("v")));
    def("glColor4iv", gl_Color4iv, (
      arg("v")));
    def("glColor4sv", gl_Color4sv, (
      arg("v")));
    def("glColor4ubv", gl_Color4ubv, (
      arg("v")));
    def("glColor4uiv", gl_Color4uiv, (
      arg("v")));
    def("glColor4usv", gl_Color4usv, (
      arg("v")));
    def("glColorMask", gl_ColorMask, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColorMaterial", gl_ColorMaterial, (
      arg("face"), arg("mode")));
    def("glColorPointer", gl_ColorPointer, (
      arg("size"), arg("type"), arg("stride"), arg("pointer")));
    def("glCopyPixels", gl_CopyPixels, (
      arg("x"), arg("y"), arg("width"), arg("height"), arg("type")));
    def("glCopyTexImage1D", gl_CopyTexImage1D, (
      arg("target"), arg("level"), arg("internalFormat"), arg("x"), arg("y"),
      arg("width"), arg("border")));
    def("glCopyTexImage2D", gl_CopyTexImage2D, (
      arg("target"), arg("level"), arg("internalFormat"), arg("x"), arg("y"),
      arg("width"), arg("height"), arg("border")));
    def("glCopyTexSubImage1D", gl_CopyTexSubImage1D, (
      arg("target"), arg("level"), arg("xoffset"), arg("x"), arg("y"),
      arg("width")));
    def("glCopyTexSubImage2D", gl_CopyTexSubImage2D, (
      arg("target"), arg("level"), arg("xoffset"), arg("yoffset"), arg("x"),
      arg("y"), arg("width"), arg("height")));
    def("glCullFace", gl_CullFace, (
      arg("mode")));
    def("glDeleteLists", gl_DeleteLists, (
      arg("list"), arg("range")));
    def("glDeleteTextures", gl_DeleteTextures, (
      arg("n"), arg("textures")));
    def("glDepthFunc", gl_DepthFunc, (
      arg("func")));
    def("glDepthMask", gl_DepthMask, (
      arg("flag")));
    def("glDepthRange", gl_DepthRange, (
      arg("zNear"), arg("zFar")));
    def("glDrawArrays", gl_DrawArrays, (
      arg("mode"), arg("first"), arg("count")));
  }

}}} // namespace gltbx::gl::boost_python
