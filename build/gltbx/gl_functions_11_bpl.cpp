/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_Rects(
    boost::python::object const& py_x1,
    boost::python::object const& py_y1,
    boost::python::object const& py_x2,
    boost::python::object const& py_y2)
  {
    boost::python::extract<GLshort> x1_proxy(py_x1);
    GLshort x1 = x1_proxy();
    boost::python::extract<GLshort> y1_proxy(py_y1);
    GLshort y1 = y1_proxy();
    boost::python::extract<GLshort> x2_proxy(py_x2);
    GLshort x2 = x2_proxy();
    boost::python::extract<GLshort> y2_proxy(py_y2);
    GLshort y2 = y2_proxy();
    glRects(x1, y1, x2, y2);
  }

  void
  gl_Rectdv(
    boost::python::object const& py_v1,
    boost::python::object const& py_v2)
  {
    boost_python::converter<GLdouble> v1_proxy(
      "v1", py_v1, 2, true);
    const GLdouble* v1 = v1_proxy.get();
    boost_python::converter<GLdouble> v2_proxy(
      "v2", py_v2, 2, true);
    const GLdouble* v2 = v2_proxy.get();
    glRectdv(v1, v2);
  }

  void
  gl_Rectfv(
    boost::python::object const& py_v1,
    boost::python::object const& py_v2)
  {
    boost_python::converter<GLfloat> v1_proxy(
      "v1", py_v1, 2, true);
    const GLfloat* v1 = v1_proxy.get();
    boost_python::converter<GLfloat> v2_proxy(
      "v2", py_v2, 2, true);
    const GLfloat* v2 = v2_proxy.get();
    glRectfv(v1, v2);
  }

  void
  gl_Rectiv(
    boost::python::object const& py_v1,
    boost::python::object const& py_v2)
  {
    boost_python::converter<GLint> v1_proxy(
      "v1", py_v1, 2, true);
    const GLint* v1 = v1_proxy.get();
    boost_python::converter<GLint> v2_proxy(
      "v2", py_v2, 2, true);
    const GLint* v2 = v2_proxy.get();
    glRectiv(v1, v2);
  }

  void
  gl_Rectsv(
    boost::python::object const& py_v1,
    boost::python::object const& py_v2)
  {
    boost_python::converter<GLshort> v1_proxy(
      "v1", py_v1, 2, true);
    const GLshort* v1 = v1_proxy.get();
    boost_python::converter<GLshort> v2_proxy(
      "v2", py_v2, 2, true);
    const GLshort* v2 = v2_proxy.get();
    glRectsv(v1, v2);
  }

  GLint
  gl_RenderMode(
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    return glRenderMode(mode);
  }

  void
  gl_Rotated(
    boost::python::object const& py_angle,
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLdouble> angle_proxy(py_angle);
    GLdouble angle = angle_proxy();
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    glRotated(angle, x, y, z);
  }

  void
  gl_Rotatef(
    boost::python::object const& py_angle,
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLfloat> angle_proxy(py_angle);
    GLfloat angle = angle_proxy();
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    glRotatef(angle, x, y, z);
  }

  void
  gl_Scaled(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    glScaled(x, y, z);
  }

  void
  gl_Scalef(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    glScalef(x, y, z);
  }

  void
  gl_Scissor(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_height)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    glScissor(x, y, width, height);
  }

  void
  gl_SelectBuffer(
    boost::python::object const& py_size,
    boost::python::object const& py_buffer)
  {
    boost::python::extract<GLsizei> size_proxy(py_size);
    GLsizei size = size_proxy();
    boost_python::converter<GLuint> buffer_proxy(
      "buffer", py_buffer, 0, false);
    GLuint* buffer = buffer_proxy.get();
    glSelectBuffer(size, buffer);
    buffer_proxy.write_back();
  }

  void
  gl_ShadeModel(
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glShadeModel(mode);
  }

  void
  gl_StencilFunc(
    boost::python::object const& py_func,
    boost::python::object const& py_ref,
    boost::python::object const& py_mask)
  {
    boost::python::extract<GLenum> func_proxy(py_func);
    GLenum func = func_proxy();
    boost::python::extract<GLint> ref_proxy(py_ref);
    GLint ref = ref_proxy();
    boost::python::extract<GLuint> mask_proxy(py_mask);
    GLuint mask = mask_proxy();
    glStencilFunc(func, ref, mask);
  }

  void
  gl_StencilMask(
    boost::python::object const& py_mask)
  {
    boost::python::extract<GLuint> mask_proxy(py_mask);
    GLuint mask = mask_proxy();
    glStencilMask(mask);
  }

  void
  gl_StencilOp(
    boost::python::object const& py_fail,
    boost::python::object const& py_zfail,
    boost::python::object const& py_zpass)
  {
    boost::python::extract<GLenum> fail_proxy(py_fail);
    GLenum fail = fail_proxy();
    boost::python::extract<GLenum> zfail_proxy(py_zfail);
    GLenum zfail = zfail_proxy();
    boost::python::extract<GLenum> zpass_proxy(py_zpass);
    GLenum zpass = zpass_proxy();
    glStencilOp(fail, zfail, zpass);
  }

  void
  gl_TexCoord1d(
    boost::python::object const& py_s)
  {
    boost::python::extract<GLdouble> s_proxy(py_s);
    GLdouble s = s_proxy();
    glTexCoord1d(s);
  }

  void
  gl_TexCoord1f(
    boost::python::object const& py_s)
  {
    boost::python::extract<GLfloat> s_proxy(py_s);
    GLfloat s = s_proxy();
    glTexCoord1f(s);
  }

  void
  gl_TexCoord1i(
    boost::python::object const& py_s)
  {
    boost::python::extract<GLint> s_proxy(py_s);
    GLint s = s_proxy();
    glTexCoord1i(s);
  }

  void
  gl_TexCoord1s(
    boost::python::object const& py_s)
  {
    boost::python::extract<GLshort> s_proxy(py_s);
    GLshort s = s_proxy();
    glTexCoord1s(s);
  }

  void
  gl_TexCoord2d(
    boost::python::object const& py_s,
    boost::python::object const& py_t)
  {
    boost::python::extract<GLdouble> s_proxy(py_s);
    GLdouble s = s_proxy();
    boost::python::extract<GLdouble> t_proxy(py_t);
    GLdouble t = t_proxy();
    glTexCoord2d(s, t);
  }

  void
  gl_TexCoord2f(
    boost::python::object const& py_s,
    boost::python::object const& py_t)
  {
    boost::python::extract<GLfloat> s_proxy(py_s);
    GLfloat s = s_proxy();
    boost::python::extract<GLfloat> t_proxy(py_t);
    GLfloat t = t_proxy();
    glTexCoord2f(s, t);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_11()
  {
    using namespace boost::python;
    def("glRects", gl_Rects, (
      arg("x1"), arg("y1"), arg("x2"), arg("y2")));
    def("glRectdv", gl_Rectdv, (
      arg("v1"), arg("v2")));
    def("glRectfv", gl_Rectfv, (
      arg("v1"), arg("v2")));
    def("glRectiv", gl_Rectiv, (
      arg("v1"), arg("v2")));
    def("glRectsv", gl_Rectsv, (
      arg("v1"), arg("v2")));
    def("glRenderMode", gl_RenderMode, (
      arg("mode")));
    def("glRotated", gl_Rotated, (
      arg("angle"), arg("x"), arg("y"), arg("z")));
    def("glRotatef", gl_Rotatef, (
      arg("angle"), arg("x"), arg("y"), arg("z")));
    def("glScaled", gl_Scaled, (
      arg("x"), arg("y"), arg("z")));
    def("glScalef", gl_Scalef, (
      arg("x"), arg("y"), arg("z")));
    def("glScissor", gl_Scissor, (
      arg("x"), arg("y"), arg("width"), arg("height")));
    def("glSelectBuffer", gl_SelectBuffer, (
      arg("size"), arg("buffer")));
    def("glShadeModel", gl_ShadeModel, (
      arg("mode")));
    def("glStencilFunc", gl_StencilFunc, (
      arg("func"), arg("ref"), arg("mask")));
    def("glStencilMask", gl_StencilMask, (
      arg("mask")));
    def("glStencilOp", gl_StencilOp, (
      arg("fail"), arg("zfail"), arg("zpass")));
    def("glTexCoord1d", gl_TexCoord1d, (
      arg("s")));
    def("glTexCoord1f", gl_TexCoord1f, (
      arg("s")));
    def("glTexCoord1i", gl_TexCoord1i, (
      arg("s")));
    def("glTexCoord1s", gl_TexCoord1s, (
      arg("s")));
    def("glTexCoord2d", gl_TexCoord2d, (
      arg("s"), arg("t")));
    def("glTexCoord2f", gl_TexCoord2f, (
      arg("s"), arg("t")));
  }

}}} // namespace gltbx::gl::boost_python
