/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_LineStipple(
    boost::python::object const& py_factor,
    boost::python::object const& py_pattern)
  {
    boost::python::extract<GLint> factor_proxy(py_factor);
    GLint factor = factor_proxy();
    boost::python::extract<GLushort> pattern_proxy(py_pattern);
    GLushort pattern = pattern_proxy();
    glLineStipple(factor, pattern);
  }

  void
  gl_LineWidth(
    boost::python::object const& py_width)
  {
    boost::python::extract<GLfloat> width_proxy(py_width);
    GLfloat width = width_proxy();
    glLineWidth(width);
  }

  void
  gl_ListBase(
    boost::python::object const& py_base)
  {
    boost::python::extract<GLuint> base_proxy(py_base);
    GLuint base = base_proxy();
    glListBase(base);
  }

  void
  gl_LoadIdentity()
  {
    glLoadIdentity();
  }

  void
  gl_LoadMatrixd(
    boost::python::object const& py_m)
  {
    boost_python::converter<GLdouble> m_proxy(
      "m", py_m, 0, true);
    const GLdouble* m = m_proxy.get();
    glLoadMatrixd(m);
  }

  void
  gl_LoadMatrixf(
    boost::python::object const& py_m)
  {
    boost_python::converter<GLfloat> m_proxy(
      "m", py_m, 0, true);
    const GLfloat* m = m_proxy.get();
    glLoadMatrixf(m);
  }

  void
  gl_LoadName(
    boost::python::object const& py_name)
  {
    boost::python::extract<GLuint> name_proxy(py_name);
    GLuint name = name_proxy();
    glLoadName(name);
  }

  void
  gl_LogicOp(
    boost::python::object const& py_opcode)
  {
    boost::python::extract<GLenum> opcode_proxy(py_opcode);
    GLenum opcode = opcode_proxy();
    glLogicOp(opcode);
  }

  void
  gl_Map1d(
    boost::python::object const& py_target,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2,
    boost::python::object const& py_stride,
    boost::python::object const& py_order,
    boost::python::object const& py_points)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLdouble> u1_proxy(py_u1);
    GLdouble u1 = u1_proxy();
    boost::python::extract<GLdouble> u2_proxy(py_u2);
    GLdouble u2 = u2_proxy();
    boost::python::extract<GLint> stride_proxy(py_stride);
    GLint stride = stride_proxy();
    boost::python::extract<GLint> order_proxy(py_order);
    GLint order = order_proxy();
    boost_python::converter<GLdouble> points_proxy(
      "points", py_points, 0, true);
    const GLdouble* points = points_proxy.get();
    glMap1d(target, u1, u2, stride, order, points);
  }

  void
  gl_Map1f(
    boost::python::object const& py_target,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2,
    boost::python::object const& py_stride,
    boost::python::object const& py_order,
    boost::python::object const& py_points)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLfloat> u1_proxy(py_u1);
    GLfloat u1 = u1_proxy();
    boost::python::extract<GLfloat> u2_proxy(py_u2);
    GLfloat u2 = u2_proxy();
    boost::python::extract<GLint> stride_proxy(py_stride);
    GLint stride = stride_proxy();
    boost::python::extract<GLint> order_proxy(py_order);
    GLint order = order_proxy();
    boost_python::converter<GLfloat> points_proxy(
      "points", py_points, 0, true);
    const GLfloat* points = points_proxy.get();
    glMap1f(target, u1, u2, stride, order, points);
  }

  void
  gl_Map2d(
    boost::python::object const& py_target,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2,
    boost::python::object const& py_ustride,
    boost::python::object const& py_uorder,
    boost::python::object const& py_v1,
    boost::python::object const& py_v2,
    boost::python::object const& py_vstride,
    boost::python::object const& py_vorder,
    boost::python::object const& py_points)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLdouble> u1_proxy(py_u1);
    GLdouble u1 = u1_proxy();
    boost::python::extract<GLdouble> u2_proxy(py_u2);
    GLdouble u2 = u2_proxy();
    boost::python::extract<GLint> ustride_proxy(py_ustride);
    GLint ustride = ustride_proxy();
    boost::python::extract<GLint> uorder_proxy(py_uorder);
    GLint uorder = uorder_proxy();
    boost::python::extract<GLdouble> v1_proxy(py_v1);
    GLdouble v1 = v1_proxy();
    boost::python::extract<GLdouble> v2_proxy(py_v2);
    GLdouble v2 = v2_proxy();
    boost::python::extract<GLint> vstride_proxy(py_vstride);
    GLint vstride = vstride_proxy();
    boost::python::extract<GLint> vorder_proxy(py_vorder);
    GLint vorder = vorder_proxy();
    boost_python::converter<GLdouble> points_proxy(
      "points", py_points, 0, true);
    const GLdouble* points = points_proxy.get();
    glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder,
      points);
  }

  void
  gl_Map2f(
    boost::python::object const& py_target,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2,
    boost::python::object const& py_ustride,
    boost::python::object const& py_uorder,
    boost::python::object const& py_v1,
    boost::python::object const& py_v2,
    boost::python::object const& py_vstride,
    boost::python::object const& py_vorder,
    boost::python::object const& py_points)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLfloat> u1_proxy(py_u1);
    GLfloat u1 = u1_proxy();
    boost::python::extract<GLfloat> u2_proxy(py_u2);
    GLfloat u2 = u2_proxy();
    boost::python::extract<GLint> ustride_proxy(py_ustride);
    GLint ustride = ustride_proxy();
    boost::python::extract<GLint> uorder_proxy(py_uorder);
    GLint uorder = uorder_proxy();
    boost::python::extract<GLfloat> v1_proxy(py_v1);
    GLfloat v1 = v1_proxy();
    boost::python::extract<GLfloat> v2_proxy(py_v2);
    GLfloat v2 = v2_proxy();
    boost::python::extract<GLint> vstride_proxy(py_vstride);
    GLint vstride = vstride_proxy();
    boost::python::extract<GLint> vorder_proxy(py_vorder);
    GLint vorder = vorder_proxy();
    boost_python::converter<GLfloat> points_proxy(
      "points", py_points, 0, true);
    const GLfloat* points = points_proxy.get();
    glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder,
      points);
  }

  void
  gl_MapGrid1d(
    boost::python::object const& py_un,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2)
  {
    boost::python::extract<GLint> un_proxy(py_un);
    GLint un = un_proxy();
    boost::python::extract<GLdouble> u1_proxy(py_u1);
    GLdouble u1 = u1_proxy();
    boost::python::extract<GLdouble> u2_proxy(py_u2);
    GLdouble u2 = u2_proxy();
    glMapGrid1d(un, u1, u2);
  }

  void
  gl_MapGrid1f(
    boost::python::object const& py_un,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2)
  {
    boost::python::extract<GLint> un_proxy(py_un);
    GLint un = un_proxy();
    boost::python::extract<GLfloat> u1_proxy(py_u1);
    GLfloat u1 = u1_proxy();
    boost::python::extract<GLfloat> u2_proxy(py_u2);
    GLfloat u2 = u2_proxy();
    glMapGrid1f(un, u1, u2);
  }

  void
  gl_MapGrid2d(
    boost::python::object const& py_un,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2,
    boost::python::object const& py_vn,
    boost::python::object const& py_v1,
    boost::python::object const& py_v2)
  {
    boost::python::extract<GLint> un_proxy(py_un);
    GLint un = un_proxy();
    boost::python::extract<GLdouble> u1_proxy(py_u1);
    GLdouble u1 = u1_proxy();
    boost::python::extract<GLdouble> u2_proxy(py_u2);
    GLdouble u2 = u2_proxy();
    boost::python::extract<GLint> vn_proxy(py_vn);
    GLint vn = vn_proxy();
    boost::python::extract<GLdouble> v1_proxy(py_v1);
    GLdouble v1 = v1_proxy();
    boost::python::extract<GLdouble> v2_proxy(py_v2);
    GLdouble v2 = v2_proxy();
    glMapGrid2d(un, u1, u2, vn, v1, v2);
  }

  void
  gl_MapGrid2f(
    boost::python::object const& py_un,
    boost::python::object const& py_u1,
    boost::python::object const& py_u2,
    boost::python::object const& py_vn,
    boost::python::object const& py_v1,
    boost::python::object const& py_v2)
  {
    boost::python::extract<GLint> un_proxy(py_un);
    GLint un = un_proxy();
    boost::python::extract<GLfloat> u1_proxy(py_u1);
    GLfloat u1 = u1_proxy();
    boost::python::extract<GLfloat> u2_proxy(py_u2);
    GLfloat u2 = u2_proxy();
    boost::python::extract<GLint> vn_proxy(py_vn);
    GLint vn = vn_proxy();
    boost::python::extract<GLfloat> v1_proxy(py_v1);
    GLfloat v1 = v1_proxy();
    boost::python::extract<GLfloat> v2_proxy(py_v2);
    GLfloat v2 = v2_proxy();
    glMapGrid2f(un, u1, u2, vn, v1, v2);
  }

  void
  gl_Materialf(
    boost::python::object const& py_face,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glMaterialf(face, pname, param);
  }

  void
  gl_Materiali(
    boost::python::object const& py_face,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glMateriali(face, pname, param);
  }

  void
  gl_Materialfv(
    boost::python::object const& py_face,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glMaterialfv(face, pname, params);
  }

  void
  gl_Materialiv(
    boost::python::object const& py_face,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glMaterialiv(face, pname, params);
  }

  void
  gl_MatrixMode(
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glMatrixMode(mode);
  }

  void
  gl_MultMatrixd(
    boost::python::object const& py_m)
  {
    boost_python::converter<GLdouble> m_proxy(
      "m", py_m, 0, true);
    const GLdouble* m = m_proxy.get();
    glMultMatrixd(m);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_07()
  {
    using namespace boost::python;
    def("glLineStipple", gl_LineStipple, (
      arg("factor"), arg("pattern")));
    def("glLineWidth", gl_LineWidth, (
      arg("width")));
    def("glListBase", gl_ListBase, (
      arg("base")));
    def("glLoadIdentity", gl_LoadIdentity);
    def("glLoadMatrixd", gl_LoadMatrixd, (
      arg("m")));
    def("glLoadMatrixf", gl_LoadMatrixf, (
      arg("m")));
    def("glLoadName", gl_LoadName, (
      arg("name")));
    def("glLogicOp", gl_LogicOp, (
      arg("opcode")));
    def("glMap1d", gl_Map1d, (
      arg("target"), arg("u1"), arg("u2"), arg("stride"), arg("order"),
      arg("points")));
    def("glMap1f", gl_Map1f, (
      arg("target"), arg("u1"), arg("u2"), arg("stride"), arg("order"),
      arg("points")));
    def("glMap2d", gl_Map2d, (
      arg("target"), arg("u1"), arg("u2"), arg("ustride"), arg("uorder"),
      arg("v1"), arg("v2"), arg("vstride"), arg("vorder"), arg("points")));
    def("glMap2f", gl_Map2f, (
      arg("target"), arg("u1"), arg("u2"), arg("ustride"), arg("uorder"),
      arg("v1"), arg("v2"), arg("vstride"), arg("vorder"), arg("points")));
    def("glMapGrid1d", gl_MapGrid1d, (
      arg("un"), arg("u1"), arg("u2")));
    def("glMapGrid1f", gl_MapGrid1f, (
      arg("un"), arg("u1"), arg("u2")));
    def("glMapGrid2d", gl_MapGrid2d, (
      arg("un"), arg("u1"), arg("u2"), arg("vn"), arg("v1"), arg("v2")));
    def("glMapGrid2f", gl_MapGrid2f, (
      arg("un"), arg("u1"), arg("u2"), arg("vn"), arg("v1"), arg("v2")));
    def("glMaterialf", gl_Materialf, (
      arg("face"), arg("pname"), arg("param")));
    def("glMateriali", gl_Materiali, (
      arg("face"), arg("pname"), arg("param")));
    def("glMaterialfv", gl_Materialfv, (
      arg("face"), arg("pname"), arg("params")));
    def("glMaterialiv", gl_Materialiv, (
      arg("face"), arg("pname"), arg("params")));
    def("glMatrixMode", gl_MatrixMode, (
      arg("mode")));
    def("glMultMatrixd", gl_MultMatrixd, (
      arg("m")));
  }

}}} // namespace gltbx::gl::boost_python
