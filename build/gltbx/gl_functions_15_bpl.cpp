/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_Vertex3sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 3, true);
    const GLshort* v = v_proxy.get();
    glVertex3sv(v);
  }

  void
  gl_Vertex4dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 4, true);
    const GLdouble* v = v_proxy.get();
    glVertex4dv(v);
  }

  void
  gl_Vertex4fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 4, true);
    const GLfloat* v = v_proxy.get();
    glVertex4fv(v);
  }

  void
  gl_Vertex4iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 4, true);
    const GLint* v = v_proxy.get();
    glVertex4iv(v);
  }

  void
  gl_Vertex4sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 4, true);
    const GLshort* v = v_proxy.get();
    glVertex4sv(v);
  }

  void
  gl_VertexPointer(
    boost::python::object const& py_size,
    boost::python::object const& py_type,
    boost::python::object const& py_stride,
    boost::python::object const& py_pointer)
  {
    boost::python::extract<GLint> size_proxy(py_size);
    GLint size = size_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost::python::extract<GLsizei> stride_proxy(py_stride);
    GLsizei stride = stride_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glVertexPointer(): const GLvoid* pointer");
  //  const GLvoid* pointer = 0;
  //  glVertexPointer(size, type, stride, pointer);
  }

  void
  gl_Viewport(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_height)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    glViewport(x, y, width, height);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_15()
  {
    using namespace boost::python;
    def("glVertex3sv", gl_Vertex3sv, (
      arg("v")));
    def("glVertex4dv", gl_Vertex4dv, (
      arg("v")));
    def("glVertex4fv", gl_Vertex4fv, (
      arg("v")));
    def("glVertex4iv", gl_Vertex4iv, (
      arg("v")));
    def("glVertex4sv", gl_Vertex4sv, (
      arg("v")));
    def("glVertexPointer", gl_VertexPointer, (
      arg("size"), arg("type"), arg("stride"), arg("pointer")));
    def("glViewport", gl_Viewport, (
      arg("x"), arg("y"), arg("width"), arg("height")));
  }

}}} // namespace gltbx::gl::boost_python
