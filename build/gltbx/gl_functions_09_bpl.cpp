/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_PixelTransferi(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glPixelTransferi(pname, param);
  }

  void
  gl_PixelZoom(
    boost::python::object const& py_xfactor,
    boost::python::object const& py_yfactor)
  {
    boost::python::extract<GLfloat> xfactor_proxy(py_xfactor);
    GLfloat xfactor = xfactor_proxy();
    boost::python::extract<GLfloat> yfactor_proxy(py_yfactor);
    GLfloat yfactor = yfactor_proxy();
    glPixelZoom(xfactor, yfactor);
  }

  void
  gl_PointSize(
    boost::python::object const& py_size)
  {
    boost::python::extract<GLfloat> size_proxy(py_size);
    GLfloat size = size_proxy();
    glPointSize(size);
  }

  void
  gl_PolygonMode(
    boost::python::object const& py_face,
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glPolygonMode(face, mode);
  }

  void
  gl_PolygonOffset(
    boost::python::object const& py_factor,
    boost::python::object const& py_units)
  {
    boost::python::extract<GLfloat> factor_proxy(py_factor);
    GLfloat factor = factor_proxy();
    boost::python::extract<GLfloat> units_proxy(py_units);
    GLfloat units = units_proxy();
    glPolygonOffset(factor, units);
  }

  void
  gl_PolygonStipple(
    boost::python::object const& py_mask)
  {
    boost_python::converter_str<GLubyte> mask_proxy(
      "mask", py_mask, 0, true);
    const GLubyte* mask = mask_proxy.get();
    glPolygonStipple(mask);
  }

  void
  gl_PrioritizeTextures(
    boost::python::object const& py_n,
    boost::python::object const& py_textures,
    boost::python::object const& py_priorities)
  {
    boost::python::extract<GLsizei> n_proxy(py_n);
    GLsizei n = n_proxy();
    boost_python::converter<GLuint> textures_proxy(
      "textures", py_textures, 0, true);
    const GLuint* textures = textures_proxy.get();
    boost_python::converter<GLclampf> priorities_proxy(
      "priorities", py_priorities, 0, true);
    const GLclampf* priorities = priorities_proxy.get();
    glPrioritizeTextures(n, textures, priorities);
  }

  void
  gl_PushAttrib(
    boost::python::object const& py_mask)
  {
    boost::python::extract<GLbitfield> mask_proxy(py_mask);
    GLbitfield mask = mask_proxy();
    glPushAttrib(mask);
  }

  void
  gl_PopAttrib()
  {
    glPopAttrib();
  }

  void
  gl_PushClientAttrib(
    boost::python::object const& py_mask)
  {
    boost::python::extract<GLbitfield> mask_proxy(py_mask);
    GLbitfield mask = mask_proxy();
    glPushClientAttrib(mask);
  }

  void
  gl_PopClientAttrib()
  {
    glPopClientAttrib();
  }

  void
  gl_PushMatrix()
  {
    glPushMatrix();
  }

  void
  gl_PopMatrix()
  {
    glPopMatrix();
  }

  void
  gl_PushName(
    boost::python::object const& py_name)
  {
    boost::python::extract<GLuint> name_proxy(py_name);
    GLuint name = name_proxy();
    glPushName(name);
  }

  void
  gl_PopName()
  {
    glPopName();
  }

  void
  gl_RasterPos2d(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    glRasterPos2d(x, y);
  }

  void
  gl_RasterPos2f(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    glRasterPos2f(x, y);
  }

  void
  gl_RasterPos2i(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    glRasterPos2i(x, y);
  }

  void
  gl_RasterPos2s(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLshort> x_proxy(py_x);
    GLshort x = x_proxy();
    boost::python::extract<GLshort> y_proxy(py_y);
    GLshort y = y_proxy();
    glRasterPos2s(x, y);
  }

  void
  gl_RasterPos3d(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    glRasterPos3d(x, y, z);
  }

  void
  gl_RasterPos3f(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    glRasterPos3f(x, y, z);
  }

  void
  gl_RasterPos3i(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLint> z_proxy(py_z);
    GLint z = z_proxy();
    glRasterPos3i(x, y, z);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_09()
  {
    using namespace boost::python;
    def("glPixelTransferi", gl_PixelTransferi, (
      arg("pname"), arg("param")));
    def("glPixelZoom", gl_PixelZoom, (
      arg("xfactor"), arg("yfactor")));
    def("glPointSize", gl_PointSize, (
      arg("size")));
    def("glPolygonMode", gl_PolygonMode, (
      arg("face"), arg("mode")));
    def("glPolygonOffset", gl_PolygonOffset, (
      arg("factor"), arg("units")));
    def("glPolygonStipple", gl_PolygonStipple, (
      arg("mask")));
    def("glPrioritizeTextures", gl_PrioritizeTextures, (
      arg("n"), arg("textures"), arg("priorities")));
    def("glPushAttrib", gl_PushAttrib, (
      arg("mask")));
    def("glPopAttrib", gl_PopAttrib);
    def("glPushClientAttrib", gl_PushClientAttrib, (
      arg("mask")));
    def("glPopClientAttrib", gl_PopClientAttrib);
    def("glPushMatrix", gl_PushMatrix);
    def("glPopMatrix", gl_PopMatrix);
    def("glPushName", gl_PushName, (
      arg("name")));
    def("glPopName", gl_PopName);
    def("glRasterPos2d", gl_RasterPos2d, (
      arg("x"), arg("y")));
    def("glRasterPos2f", gl_RasterPos2f, (
      arg("x"), arg("y")));
    def("glRasterPos2i", gl_RasterPos2i, (
      arg("x"), arg("y")));
    def("glRasterPos2s", gl_RasterPos2s, (
      arg("x"), arg("y")));
    def("glRasterPos3d", gl_RasterPos3d, (
      arg("x"), arg("y"), arg("z")));
    def("glRasterPos3f", gl_RasterPos3f, (
      arg("x"), arg("y"), arg("z")));
    def("glRasterPos3i", gl_RasterPos3i, (
      arg("x"), arg("y"), arg("z")));
  }

}}} // namespace gltbx::gl::boost_python
