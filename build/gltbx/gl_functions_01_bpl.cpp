/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_Color3i(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue)
  {
    boost::python::extract<GLint> red_proxy(py_red);
    GLint red = red_proxy();
    boost::python::extract<GLint> green_proxy(py_green);
    GLint green = green_proxy();
    boost::python::extract<GLint> blue_proxy(py_blue);
    GLint blue = blue_proxy();
    glColor3i(red, green, blue);
  }

  void
  gl_Color3s(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue)
  {
    boost::python::extract<GLshort> red_proxy(py_red);
    GLshort red = red_proxy();
    boost::python::extract<GLshort> green_proxy(py_green);
    GLshort green = green_proxy();
    boost::python::extract<GLshort> blue_proxy(py_blue);
    GLshort blue = blue_proxy();
    glColor3s(red, green, blue);
  }

  void
  gl_Color3ub(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue)
  {
    boost::python::extract<GLubyte> red_proxy(py_red);
    GLubyte red = red_proxy();
    boost::python::extract<GLubyte> green_proxy(py_green);
    GLubyte green = green_proxy();
    boost::python::extract<GLubyte> blue_proxy(py_blue);
    GLubyte blue = blue_proxy();
    glColor3ub(red, green, blue);
  }

  void
  gl_Color3ui(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue)
  {
    boost::python::extract<GLuint> red_proxy(py_red);
    GLuint red = red_proxy();
    boost::python::extract<GLuint> green_proxy(py_green);
    GLuint green = green_proxy();
    boost::python::extract<GLuint> blue_proxy(py_blue);
    GLuint blue = blue_proxy();
    glColor3ui(red, green, blue);
  }

  void
  gl_Color3us(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue)
  {
    boost::python::extract<GLushort> red_proxy(py_red);
    GLushort red = red_proxy();
    boost::python::extract<GLushort> green_proxy(py_green);
    GLushort green = green_proxy();
    boost::python::extract<GLushort> blue_proxy(py_blue);
    GLushort blue = blue_proxy();
    glColor3us(red, green, blue);
  }

  void
  gl_Color4b(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLbyte> red_proxy(py_red);
    GLbyte red = red_proxy();
    boost::python::extract<GLbyte> green_proxy(py_green);
    GLbyte green = green_proxy();
    boost::python::extract<GLbyte> blue_proxy(py_blue);
    GLbyte blue = blue_proxy();
    boost::python::extract<GLbyte> alpha_proxy(py_alpha);
    GLbyte alpha = alpha_proxy();
    glColor4b(red, green, blue, alpha);
  }

  void
  gl_Color4d(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLdouble> red_proxy(py_red);
    GLdouble red = red_proxy();
    boost::python::extract<GLdouble> green_proxy(py_green);
    GLdouble green = green_proxy();
    boost::python::extract<GLdouble> blue_proxy(py_blue);
    GLdouble blue = blue_proxy();
    boost::python::extract<GLdouble> alpha_proxy(py_alpha);
    GLdouble alpha = alpha_proxy();
    glColor4d(red, green, blue, alpha);
  }

  void
  gl_Color4f(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLfloat> red_proxy(py_red);
    GLfloat red = red_proxy();
    boost::python::extract<GLfloat> green_proxy(py_green);
    GLfloat green = green_proxy();
    boost::python::extract<GLfloat> blue_proxy(py_blue);
    GLfloat blue = blue_proxy();
    boost::python::extract<GLfloat> alpha_proxy(py_alpha);
    GLfloat alpha = alpha_proxy();
    glColor4f(red, green, blue, alpha);
  }

  void
  gl_Color4i(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLint> red_proxy(py_red);
    GLint red = red_proxy();
    boost::python::extract<GLint> green_proxy(py_green);
    GLint green = green_proxy();
    boost::python::extract<GLint> blue_proxy(py_blue);
    GLint blue = blue_proxy();
    boost::python::extract<GLint> alpha_proxy(py_alpha);
    GLint alpha = alpha_proxy();
    glColor4i(red, green, blue, alpha);
  }

  void
  gl_Color4s(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLshort> red_proxy(py_red);
    GLshort red = red_proxy();
    boost::python::extract<GLshort> green_proxy(py_green);
    GLshort green = green_proxy();
    boost::python::extract<GLshort> blue_proxy(py_blue);
    GLshort blue = blue_proxy();
    boost::python::extract<GLshort> alpha_proxy(py_alpha);
    GLshort alpha = alpha_proxy();
    glColor4s(red, green, blue, alpha);
  }

  void
  gl_Color4ub(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLubyte> red_proxy(py_red);
    GLubyte red = red_proxy();
    boost::python::extract<GLubyte> green_proxy(py_green);
    GLubyte green = green_proxy();
    boost::python::extract<GLubyte> blue_proxy(py_blue);
    GLubyte blue = blue_proxy();
    boost::python::extract<GLubyte> alpha_proxy(py_alpha);
    GLubyte alpha = alpha_proxy();
    glColor4ub(red, green, blue, alpha);
  }

  void
  gl_Color4ui(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLuint> red_proxy(py_red);
    GLuint red = red_proxy();
    boost::python::extract<GLuint> green_proxy(py_green);
    GLuint green = green_proxy();
    boost::python::extract<GLuint> blue_proxy(py_blue);
    GLuint blue = blue_proxy();
    boost::python::extract<GLuint> alpha_proxy(py_alpha);
    GLuint alpha = alpha_proxy();
    glColor4ui(red, green, blue, alpha);
  }

  void
  gl_Color4us(
    boost::python::object const& py_red,
    boost::python::object const& py_green,
    boost::python::object const& py_blue,
    boost::python::object const& py_alpha)
  {
    boost::python::extract<GLushort> red_proxy(py_red);
    GLushort red = red_proxy();
    boost::python::extract<GLushort> green_proxy(py_green);
    GLushort green = green_proxy();
    boost::python::extract<GLushort> blue_proxy(py_blue);
    GLushort blue = blue_proxy();
    boost::python::extract<GLushort> alpha_proxy(py_alpha);
    GLushort alpha = alpha_proxy();
    glColor4us(red, green, blue, alpha);
  }

  void
  gl_Color3bv(
    boost::python::object const& py_v)
  {
    boost_python::converter_str<GLbyte> v_proxy(
      "v", py_v, 3, true);
    const GLbyte* v = v_proxy.get();
    glColor3bv(v);
  }

  void
  gl_Color3dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 3, true);
    const GLdouble* v = v_proxy.get();
    glColor3dv(v);
  }

  void
  gl_Color3fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 3, true);
    const GLfloat* v = v_proxy.get();
    glColor3fv(v);
  }

  void
  gl_Color3iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 3, true);
    const GLint* v = v_proxy.get();
    glColor3iv(v);
  }

  void
  gl_Color3sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 3, true);
    const GLshort* v = v_proxy.get();
    glColor3sv(v);
  }

  void
  gl_Color3ubv(
    boost::python::object const& py_v)
  {
    boost_python::converter_str<GLubyte> v_proxy(
      "v", py_v, 3, true);
    const GLubyte* v = v_proxy.get();
    glColor3ubv(v);
  }

  void
  gl_Color3uiv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLuint> v_proxy(
      "v", py_v, 3, true);
    const GLuint* v = v_proxy.get();
    glColor3uiv(v);
  }

  void
  gl_Color3usv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLushort> v_proxy(
      "v", py_v, 3, true);
    const GLushort* v = v_proxy.get();
    glColor3usv(v);
  }

  void
  gl_Color4bv(
    boost::python::object const& py_v)
  {
    boost_python::converter_str<GLbyte> v_proxy(
      "v", py_v, 4, true);
    const GLbyte* v = v_proxy.get();
    glColor4bv(v);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_01()
  {
    using namespace boost::python;
    def("glColor3i", gl_Color3i, (
      arg("red"), arg("green"), arg("blue")));
    def("glColor3s", gl_Color3s, (
      arg("red"), arg("green"), arg("blue")));
    def("glColor3ub", gl_Color3ub, (
      arg("red"), arg("green"), arg("blue")));
    def("glColor3ui", gl_Color3ui, (
      arg("red"), arg("green"), arg("blue")));
    def("glColor3us", gl_Color3us, (
      arg("red"), arg("green"), arg("blue")));
    def("glColor4b", gl_Color4b, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4d", gl_Color4d, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4f", gl_Color4f, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4i", gl_Color4i, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4s", gl_Color4s, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4ub", gl_Color4ub, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4ui", gl_Color4ui, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor4us", gl_Color4us, (
      arg("red"), arg("green"), arg("blue"), arg("alpha")));
    def("glColor3bv", gl_Color3bv, (
      arg("v")));
    def("glColor3dv", gl_Color3dv, (
      arg("v")));
    def("glColor3fv", gl_Color3fv, (
      arg("v")));
    def("glColor3iv", gl_Color3iv, (
      arg("v")));
    def("glColor3sv", gl_Color3sv, (
      arg("v")));
    def("glColor3ubv", gl_Color3ubv, (
      arg("v")));
    def("glColor3uiv", gl_Color3uiv, (
      arg("v")));
    def("glColor3usv", gl_Color3usv, (
      arg("v")));
    def("glColor4bv", gl_Color4bv, (
      arg("v")));
  }

}}} // namespace gltbx::gl::boost_python
