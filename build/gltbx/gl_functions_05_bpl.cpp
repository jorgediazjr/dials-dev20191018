/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_GetMaterialfv(
    boost::python::object const& py_face,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetMaterialfv(face, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetMaterialiv(
    boost::python::object const& py_face,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> face_proxy(py_face);
    GLenum face = face_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetMaterialiv(face, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetPixelMapfv(
    boost::python::object const& py_map,
    boost::python::object const& py_values)
  {
    boost::python::extract<GLenum> map_proxy(py_map);
    GLenum map = map_proxy();
    boost_python::converter<GLfloat> values_proxy(
      "values", py_values, 0, false);
    GLfloat* values = values_proxy.get();
    glGetPixelMapfv(map, values);
    values_proxy.write_back();
  }

  void
  gl_GetPixelMapuiv(
    boost::python::object const& py_map,
    boost::python::object const& py_values)
  {
    boost::python::extract<GLenum> map_proxy(py_map);
    GLenum map = map_proxy();
    boost_python::converter<GLuint> values_proxy(
      "values", py_values, 0, false);
    GLuint* values = values_proxy.get();
    glGetPixelMapuiv(map, values);
    values_proxy.write_back();
  }

  void
  gl_GetPixelMapusv(
    boost::python::object const& py_map,
    boost::python::object const& py_values)
  {
    boost::python::extract<GLenum> map_proxy(py_map);
    GLenum map = map_proxy();
    boost_python::converter<GLushort> values_proxy(
      "values", py_values, 0, false);
    GLushort* values = values_proxy.get();
    glGetPixelMapusv(map, values);
    values_proxy.write_back();
  }

  void
  gl_GetPointerv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glGetPointerv(): GLvoid** params");
  //  GLvoid** params = 0;
  //  glGetPointerv(pname, params);
  }

  void
  gl_GetPolygonStipple(
    boost::python::object const& py_mask)
  {
    boost_python::converter_str<GLubyte> mask_proxy(
      "mask", py_mask, 0, false);
    GLubyte* mask = mask_proxy.get();
    glGetPolygonStipple(mask);
    mask_proxy.write_back();
  }

  boost::python::str
  gl_GetString(boost::python::object const& py_name)
  {
    boost::python::extract<GLenum> name_proxy(py_name);
    GLenum name = name_proxy();
    boost::python::str result(
      reinterpret_cast<const char*>(glGetString(name)));
    return result;
  }

  void
  gl_GetTexEnvfv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetTexEnvfv(target, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexEnviv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetTexEnviv(target, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexGendv(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLdouble> params_proxy(
      "params", py_params, 0, false);
    GLdouble* params = params_proxy.get();
    glGetTexGendv(coord, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexGenfv(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetTexGenfv(coord, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexGeniv(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetTexGeniv(coord, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexImage(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_format,
    boost::python::object const& py_type,
    boost::python::object const& py_pixels)
  {
  
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    if      (type == GL_BYTE) {
      boost_python::converter_str<GLubyte> pixels_proxy(
        "pixels", py_pixels, 0, false);
      GLvoid* pixels = reinterpret_cast<GLvoid*>(
        pixels_proxy.get());
      glGetTexImage(target, level, format, type, pixels);
      pixels_proxy.write_back();
    }
    else if (type == GL_UNSIGNED_BYTE) {
      boost_python::converter_str<GLbyte> pixels_proxy(
        "pixels", py_pixels, 0, false);
      GLvoid* pixels = reinterpret_cast<GLvoid*>(
        pixels_proxy.get());
      glGetTexImage(target, level, format, type, pixels);
      pixels_proxy.write_back();
    }
    else {
      throw std::runtime_error(
        "Conversion not implemented for given GLenum type:"
        " glGetTexImage(): GLvoid* pixels");
    }
  }

  void
  gl_GetTexLevelParameterfv(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetTexLevelParameterfv(target, level, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexLevelParameteriv(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetTexLevelParameteriv(target, level, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexParameterfv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetTexParameterfv(target, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetTexParameteriv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetTexParameteriv(target, pname, params);
    params_proxy.write_back();
  }

  void
  gl_Hint(
    boost::python::object const& py_target,
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glHint(target, mode);
  }

  void
  gl_Indexd(
    boost::python::object const& py_c)
  {
    boost::python::extract<GLdouble> c_proxy(py_c);
    GLdouble c = c_proxy();
    glIndexd(c);
  }

  void
  gl_Indexf(
    boost::python::object const& py_c)
  {
    boost::python::extract<GLfloat> c_proxy(py_c);
    GLfloat c = c_proxy();
    glIndexf(c);
  }

  void
  gl_Indexi(
    boost::python::object const& py_c)
  {
    boost::python::extract<GLint> c_proxy(py_c);
    GLint c = c_proxy();
    glIndexi(c);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_05()
  {
    using namespace boost::python;
    def("glGetMaterialfv", gl_GetMaterialfv, (
      arg("face"), arg("pname"), arg("params")));
    def("glGetMaterialiv", gl_GetMaterialiv, (
      arg("face"), arg("pname"), arg("params")));
    def("glGetPixelMapfv", gl_GetPixelMapfv, (
      arg("map"), arg("values")));
    def("glGetPixelMapuiv", gl_GetPixelMapuiv, (
      arg("map"), arg("values")));
    def("glGetPixelMapusv", gl_GetPixelMapusv, (
      arg("map"), arg("values")));
    def("glGetPointerv", gl_GetPointerv, (
      arg("pname"), arg("params")));
    def("glGetPolygonStipple", gl_GetPolygonStipple, (
      arg("mask")));
    def("glGetString", gl_GetString, (
      arg("name")));
    def("glGetTexEnvfv", gl_GetTexEnvfv, (
      arg("target"), arg("pname"), arg("params")));
    def("glGetTexEnviv", gl_GetTexEnviv, (
      arg("target"), arg("pname"), arg("params")));
    def("glGetTexGendv", gl_GetTexGendv, (
      arg("coord"), arg("pname"), arg("params")));
    def("glGetTexGenfv", gl_GetTexGenfv, (
      arg("coord"), arg("pname"), arg("params")));
    def("glGetTexGeniv", gl_GetTexGeniv, (
      arg("coord"), arg("pname"), arg("params")));
    def("glGetTexImage", gl_GetTexImage, (
      arg("target"), arg("level"), arg("format"), arg("type"), arg("pixels")));
    def("glGetTexLevelParameterfv", gl_GetTexLevelParameterfv, (
      arg("target"), arg("level"), arg("pname"), arg("params")));
    def("glGetTexLevelParameteriv", gl_GetTexLevelParameteriv, (
      arg("target"), arg("level"), arg("pname"), arg("params")));
    def("glGetTexParameterfv", gl_GetTexParameterfv, (
      arg("target"), arg("pname"), arg("params")));
    def("glGetTexParameteriv", gl_GetTexParameteriv, (
      arg("target"), arg("pname"), arg("params")));
    def("glHint", gl_Hint, (
      arg("target"), arg("mode")));
    def("glIndexd", gl_Indexd, (
      arg("c")));
    def("glIndexf", gl_Indexf, (
      arg("c")));
    def("glIndexi", gl_Indexi, (
      arg("c")));
  }

}}} // namespace gltbx::gl::boost_python
