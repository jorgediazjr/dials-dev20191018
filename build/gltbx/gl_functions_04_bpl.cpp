/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_FeedbackBuffer(
    boost::python::object const& py_size,
    boost::python::object const& py_type,
    boost::python::object const& py_buffer)
  {
    boost::python::extract<GLsizei> size_proxy(py_size);
    GLsizei size = size_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost_python::converter<GLfloat> buffer_proxy(
      "buffer", py_buffer, size, false);
    GLfloat* buffer = buffer_proxy.get();
    glFeedbackBuffer(size, type, buffer);
    buffer_proxy.write_back();
  }

  void
  gl_Finish()
  {
    glFinish();
  }

  void
  gl_Flush()
  {
    glFlush();
  }

  void
  gl_Fogf(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glFogf(pname, param);
  }

  void
  gl_Fogi(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glFogi(pname, param);
  }

  void
  gl_Fogfv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glFogfv(pname, params);
  }

  void
  gl_Fogiv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glFogiv(pname, params);
  }

  void
  gl_FrontFace(
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glFrontFace(mode);
  }

  void
  gl_Frustum(
    boost::python::object const& py_left,
    boost::python::object const& py_right,
    boost::python::object const& py_bottom,
    boost::python::object const& py_top,
    boost::python::object const& py_zNear,
    boost::python::object const& py_zFar)
  {
    boost::python::extract<GLdouble> left_proxy(py_left);
    GLdouble left = left_proxy();
    boost::python::extract<GLdouble> right_proxy(py_right);
    GLdouble right = right_proxy();
    boost::python::extract<GLdouble> bottom_proxy(py_bottom);
    GLdouble bottom = bottom_proxy();
    boost::python::extract<GLdouble> top_proxy(py_top);
    GLdouble top = top_proxy();
    boost::python::extract<GLdouble> zNear_proxy(py_zNear);
    GLdouble zNear = zNear_proxy();
    boost::python::extract<GLdouble> zFar_proxy(py_zFar);
    GLdouble zFar = zFar_proxy();
    glFrustum(left, right, bottom, top, zNear, zFar);
  }

  GLuint
  gl_GenLists(
    boost::python::object const& py_range)
  {
    boost::python::extract<GLsizei> range_proxy(py_range);
    GLsizei range = range_proxy();
    return glGenLists(range);
  }

  void
  gl_GenTextures(
    boost::python::object const& py_n,
    boost::python::object const& py_textures)
  {
    boost::python::extract<GLsizei> n_proxy(py_n);
    GLsizei n = n_proxy();
    boost_python::converter<GLuint> textures_proxy(
      "textures", py_textures, n, false);
    GLuint* textures = textures_proxy.get();
    glGenTextures(n, textures);
    textures_proxy.write_back();
  }

  void
  gl_GetClipPlane(
    boost::python::object const& py_plane,
    boost::python::object const& py_equation)
  {
    boost::python::extract<GLenum> plane_proxy(py_plane);
    GLenum plane = plane_proxy();
    boost_python::converter<GLdouble> equation_proxy(
      "equation", py_equation, 4, false);
    GLdouble* equation = equation_proxy.get();
    glGetClipPlane(plane, equation);
    equation_proxy.write_back();
  }

  GLenum
  gl_GetError()
  {
    return glGetError();
  }

  void
  gl_GetBooleanv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLboolean> params_proxy(
      "params", py_params, 0, false);
    GLboolean* params = params_proxy.get();
    glGetBooleanv(pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetDoublev(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLdouble> params_proxy(
      "params", py_params, 0, false);
    GLdouble* params = params_proxy.get();
    glGetDoublev(pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetFloatv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetFloatv(pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetIntegerv(
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetIntegerv(pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetLightfv(
    boost::python::object const& py_light,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> light_proxy(py_light);
    GLenum light = light_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, false);
    GLfloat* params = params_proxy.get();
    glGetLightfv(light, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetLightiv(
    boost::python::object const& py_light,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> light_proxy(py_light);
    GLenum light = light_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, false);
    GLint* params = params_proxy.get();
    glGetLightiv(light, pname, params);
    params_proxy.write_back();
  }

  void
  gl_GetMapdv(
    boost::python::object const& py_target,
    boost::python::object const& py_query,
    boost::python::object const& py_v)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> query_proxy(py_query);
    GLenum query = query_proxy();
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 0, false);
    GLdouble* v = v_proxy.get();
    glGetMapdv(target, query, v);
    v_proxy.write_back();
  }

  void
  gl_GetMapfv(
    boost::python::object const& py_target,
    boost::python::object const& py_query,
    boost::python::object const& py_v)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> query_proxy(py_query);
    GLenum query = query_proxy();
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 0, false);
    GLfloat* v = v_proxy.get();
    glGetMapfv(target, query, v);
    v_proxy.write_back();
  }

  void
  gl_GetMapiv(
    boost::python::object const& py_target,
    boost::python::object const& py_query,
    boost::python::object const& py_v)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> query_proxy(py_query);
    GLenum query = query_proxy();
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 0, false);
    GLint* v = v_proxy.get();
    glGetMapiv(target, query, v);
    v_proxy.write_back();
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_04()
  {
    using namespace boost::python;
    def("glFeedbackBuffer", gl_FeedbackBuffer, (
      arg("size"), arg("type"), arg("buffer")));
    def("glFinish", gl_Finish);
    def("glFlush", gl_Flush);
    def("glFogf", gl_Fogf, (
      arg("pname"), arg("param")));
    def("glFogi", gl_Fogi, (
      arg("pname"), arg("param")));
    def("glFogfv", gl_Fogfv, (
      arg("pname"), arg("params")));
    def("glFogiv", gl_Fogiv, (
      arg("pname"), arg("params")));
    def("glFrontFace", gl_FrontFace, (
      arg("mode")));
    def("glFrustum", gl_Frustum, (
      arg("left"), arg("right"), arg("bottom"), arg("top"), arg("zNear"),
      arg("zFar")));
    def("glGenLists", gl_GenLists, (
      arg("range")));
    def("glGenTextures", gl_GenTextures, (
      arg("n"), arg("textures")));
    def("glGetClipPlane", gl_GetClipPlane, (
      arg("plane"), arg("equation")));
    def("glGetError", gl_GetError);
    def("glGetBooleanv", gl_GetBooleanv, (
      arg("pname"), arg("params")));
    def("glGetDoublev", gl_GetDoublev, (
      arg("pname"), arg("params")));
    def("glGetFloatv", gl_GetFloatv, (
      arg("pname"), arg("params")));
    def("glGetIntegerv", gl_GetIntegerv, (
      arg("pname"), arg("params")));
    def("glGetLightfv", gl_GetLightfv, (
      arg("light"), arg("pname"), arg("params")));
    def("glGetLightiv", gl_GetLightiv, (
      arg("light"), arg("pname"), arg("params")));
    def("glGetMapdv", gl_GetMapdv, (
      arg("target"), arg("query"), arg("v")));
    def("glGetMapfv", gl_GetMapfv, (
      arg("target"), arg("query"), arg("v")));
    def("glGetMapiv", gl_GetMapiv, (
      arg("target"), arg("query"), arg("v")));
  }

}}} // namespace gltbx::gl::boost_python
