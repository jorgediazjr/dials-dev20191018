/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_RasterPos3s(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLshort> x_proxy(py_x);
    GLshort x = x_proxy();
    boost::python::extract<GLshort> y_proxy(py_y);
    GLshort y = y_proxy();
    boost::python::extract<GLshort> z_proxy(py_z);
    GLshort z = z_proxy();
    glRasterPos3s(x, y, z);
  }

  void
  gl_RasterPos4d(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    boost::python::extract<GLdouble> w_proxy(py_w);
    GLdouble w = w_proxy();
    glRasterPos4d(x, y, z, w);
  }

  void
  gl_RasterPos4f(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    boost::python::extract<GLfloat> w_proxy(py_w);
    GLfloat w = w_proxy();
    glRasterPos4f(x, y, z, w);
  }

  void
  gl_RasterPos4i(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLint> z_proxy(py_z);
    GLint z = z_proxy();
    boost::python::extract<GLint> w_proxy(py_w);
    GLint w = w_proxy();
    glRasterPos4i(x, y, z, w);
  }

  void
  gl_RasterPos4s(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLshort> x_proxy(py_x);
    GLshort x = x_proxy();
    boost::python::extract<GLshort> y_proxy(py_y);
    GLshort y = y_proxy();
    boost::python::extract<GLshort> z_proxy(py_z);
    GLshort z = z_proxy();
    boost::python::extract<GLshort> w_proxy(py_w);
    GLshort w = w_proxy();
    glRasterPos4s(x, y, z, w);
  }

  void
  gl_RasterPos2dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 2, true);
    const GLdouble* v = v_proxy.get();
    glRasterPos2dv(v);
  }

  void
  gl_RasterPos2fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 2, true);
    const GLfloat* v = v_proxy.get();
    glRasterPos2fv(v);
  }

  void
  gl_RasterPos2iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 2, true);
    const GLint* v = v_proxy.get();
    glRasterPos2iv(v);
  }

  void
  gl_RasterPos2sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 2, true);
    const GLshort* v = v_proxy.get();
    glRasterPos2sv(v);
  }

  void
  gl_RasterPos3dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 3, true);
    const GLdouble* v = v_proxy.get();
    glRasterPos3dv(v);
  }

  void
  gl_RasterPos3fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 3, true);
    const GLfloat* v = v_proxy.get();
    glRasterPos3fv(v);
  }

  void
  gl_RasterPos3iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 3, true);
    const GLint* v = v_proxy.get();
    glRasterPos3iv(v);
  }

  void
  gl_RasterPos3sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 3, true);
    const GLshort* v = v_proxy.get();
    glRasterPos3sv(v);
  }

  void
  gl_RasterPos4dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 4, true);
    const GLdouble* v = v_proxy.get();
    glRasterPos4dv(v);
  }

  void
  gl_RasterPos4fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 4, true);
    const GLfloat* v = v_proxy.get();
    glRasterPos4fv(v);
  }

  void
  gl_RasterPos4iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 4, true);
    const GLint* v = v_proxy.get();
    glRasterPos4iv(v);
  }

  void
  gl_RasterPos4sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 4, true);
    const GLshort* v = v_proxy.get();
    glRasterPos4sv(v);
  }

  void
  gl_ReadBuffer(
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glReadBuffer(mode);
  }

  void
  gl_ReadPixels(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_width,
    boost::python::object const& py_height,
    boost::python::object const& py_format,
    boost::python::object const& py_type,
    boost::python::object const& py_pixels)
  {
  
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost::python::ssize_t expected_size = glReadPixels_pixels_expected_size(
      width, height, format, type);
    if      (type == GL_BYTE) {
      boost_python::converter_str<GLubyte> pixels_proxy(
        "pixels", py_pixels, expected_size, false);
      GLvoid* pixels = reinterpret_cast<GLvoid*>(
        pixels_proxy.get());
      glReadPixels(x, y, width, height, format, type, pixels);
      pixels_proxy.write_back();
    }
    else if (type == GL_UNSIGNED_BYTE) {
      boost_python::converter_str<GLbyte> pixels_proxy(
        "pixels", py_pixels, expected_size, false);
      GLvoid* pixels = reinterpret_cast<GLvoid*>(
        pixels_proxy.get());
      glReadPixels(x, y, width, height, format, type, pixels);
      pixels_proxy.write_back();
    }
    else {
      throw std::runtime_error(
        "Conversion not implemented for given GLenum type:"
        " glReadPixels(): GLvoid* pixels");
    }
  }

  void
  gl_Rectd(
    boost::python::object const& py_x1,
    boost::python::object const& py_y1,
    boost::python::object const& py_x2,
    boost::python::object const& py_y2)
  {
    boost::python::extract<GLdouble> x1_proxy(py_x1);
    GLdouble x1 = x1_proxy();
    boost::python::extract<GLdouble> y1_proxy(py_y1);
    GLdouble y1 = y1_proxy();
    boost::python::extract<GLdouble> x2_proxy(py_x2);
    GLdouble x2 = x2_proxy();
    boost::python::extract<GLdouble> y2_proxy(py_y2);
    GLdouble y2 = y2_proxy();
    glRectd(x1, y1, x2, y2);
  }

  void
  gl_Rectf(
    boost::python::object const& py_x1,
    boost::python::object const& py_y1,
    boost::python::object const& py_x2,
    boost::python::object const& py_y2)
  {
    boost::python::extract<GLfloat> x1_proxy(py_x1);
    GLfloat x1 = x1_proxy();
    boost::python::extract<GLfloat> y1_proxy(py_y1);
    GLfloat y1 = y1_proxy();
    boost::python::extract<GLfloat> x2_proxy(py_x2);
    GLfloat x2 = x2_proxy();
    boost::python::extract<GLfloat> y2_proxy(py_y2);
    GLfloat y2 = y2_proxy();
    glRectf(x1, y1, x2, y2);
  }

  void
  gl_Recti(
    boost::python::object const& py_x1,
    boost::python::object const& py_y1,
    boost::python::object const& py_x2,
    boost::python::object const& py_y2)
  {
    boost::python::extract<GLint> x1_proxy(py_x1);
    GLint x1 = x1_proxy();
    boost::python::extract<GLint> y1_proxy(py_y1);
    GLint y1 = y1_proxy();
    boost::python::extract<GLint> x2_proxy(py_x2);
    GLint x2 = x2_proxy();
    boost::python::extract<GLint> y2_proxy(py_y2);
    GLint y2 = y2_proxy();
    glRecti(x1, y1, x2, y2);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_10()
  {
    using namespace boost::python;
    def("glRasterPos3s", gl_RasterPos3s, (
      arg("x"), arg("y"), arg("z")));
    def("glRasterPos4d", gl_RasterPos4d, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glRasterPos4f", gl_RasterPos4f, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glRasterPos4i", gl_RasterPos4i, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glRasterPos4s", gl_RasterPos4s, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glRasterPos2dv", gl_RasterPos2dv, (
      arg("v")));
    def("glRasterPos2fv", gl_RasterPos2fv, (
      arg("v")));
    def("glRasterPos2iv", gl_RasterPos2iv, (
      arg("v")));
    def("glRasterPos2sv", gl_RasterPos2sv, (
      arg("v")));
    def("glRasterPos3dv", gl_RasterPos3dv, (
      arg("v")));
    def("glRasterPos3fv", gl_RasterPos3fv, (
      arg("v")));
    def("glRasterPos3iv", gl_RasterPos3iv, (
      arg("v")));
    def("glRasterPos3sv", gl_RasterPos3sv, (
      arg("v")));
    def("glRasterPos4dv", gl_RasterPos4dv, (
      arg("v")));
    def("glRasterPos4fv", gl_RasterPos4fv, (
      arg("v")));
    def("glRasterPos4iv", gl_RasterPos4iv, (
      arg("v")));
    def("glRasterPos4sv", gl_RasterPos4sv, (
      arg("v")));
    def("glReadBuffer", gl_ReadBuffer, (
      arg("mode")));
    def("glReadPixels", gl_ReadPixels, (
      arg("x"), arg("y"), arg("width"), arg("height"), arg("format"),
      arg("type"), arg("pixels")));
    def("glRectd", gl_Rectd, (
      arg("x1"), arg("y1"), arg("x2"), arg("y2")));
    def("glRectf", gl_Rectf, (
      arg("x1"), arg("y1"), arg("x2"), arg("y2")));
    def("glRecti", gl_Recti, (
      arg("x1"), arg("y1"), arg("x2"), arg("y2")));
  }

}}} // namespace gltbx::gl::boost_python
