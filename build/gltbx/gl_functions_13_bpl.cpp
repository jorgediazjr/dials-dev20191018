/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_TexCoord4dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 4, true);
    const GLdouble* v = v_proxy.get();
    glTexCoord4dv(v);
  }

  void
  gl_TexCoord4fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 4, true);
    const GLfloat* v = v_proxy.get();
    glTexCoord4fv(v);
  }

  void
  gl_TexCoord4iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 4, true);
    const GLint* v = v_proxy.get();
    glTexCoord4iv(v);
  }

  void
  gl_TexCoord4sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 4, true);
    const GLshort* v = v_proxy.get();
    glTexCoord4sv(v);
  }

  void
  gl_TexCoordPointer(
    boost::python::object const& py_size,
    boost::python::object const& py_type,
    boost::python::object const& py_stride,
    boost::python::object const& py_pointer)
  {
    boost::python::extract<GLint> size_proxy(py_size);
    GLint size = size_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost::python::extract<GLsizei> stride_proxy(py_stride);
    GLsizei stride = stride_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glTexCoordPointer(): const GLvoid* pointer");
  //  const GLvoid* pointer = 0;
  //  glTexCoordPointer(size, type, stride, pointer);
  }

  void
  gl_TexEnvf(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glTexEnvf(target, pname, param);
  }

  void
  gl_TexEnvi(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glTexEnvi(target, pname, param);
  }

  void
  gl_TexEnvfv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glTexEnvfv(target, pname, params);
  }

  void
  gl_TexEnviv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glTexEnviv(target, pname, params);
  }

  void
  gl_TexGend(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLdouble> param_proxy(py_param);
    GLdouble param = param_proxy();
    glTexGend(coord, pname, param);
  }

  void
  gl_TexGenf(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glTexGenf(coord, pname, param);
  }

  void
  gl_TexGeni(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glTexGeni(coord, pname, param);
  }

  void
  gl_TexGendv(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLdouble> params_proxy(
      "params", py_params, 0, true);
    const GLdouble* params = params_proxy.get();
    glTexGendv(coord, pname, params);
  }

  void
  gl_TexGenfv(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glTexGenfv(coord, pname, params);
  }

  void
  gl_TexGeniv(
    boost::python::object const& py_coord,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> coord_proxy(py_coord);
    GLenum coord = coord_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glTexGeniv(coord, pname, params);
  }

  void
  gl_TexImage1D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_internalformat,
    boost::python::object const& py_width,
    boost::python::object const& py_border,
    boost::python::object const& py_format,
    boost::python::object const& py_type,
    boost::python::object const& py_pixels)
  {
  
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLint> internalformat_proxy(py_internalformat);
    GLint internalformat = internalformat_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLint> border_proxy(py_border);
    GLint border = border_proxy();
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    if      (type == GL_BYTE) {
      boost_python::converter_str<GLubyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexImage1D(target, level, internalformat, width, border, format,
        type, pixels);
    }
    else if (type == GL_UNSIGNED_BYTE) {
      boost_python::converter_str<GLbyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexImage1D(target, level, internalformat, width, border, format,
        type, pixels);
    }
    else {
      throw std::runtime_error(
        "Conversion not implemented for given GLenum type:"
        " glTexImage1D(): const GLvoid* pixels");
    }
  }

  void
  gl_TexImage2D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_internalformat,
    boost::python::object const& py_width,
    boost::python::object const& py_height,
    boost::python::object const& py_border,
    boost::python::object const& py_format,
    boost::python::object const& py_type,
    boost::python::object const& py_pixels)
  {
  
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLint> internalformat_proxy(py_internalformat);
    GLint internalformat = internalformat_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    boost::python::extract<GLint> border_proxy(py_border);
    GLint border = border_proxy();
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    if      (type == GL_BYTE) {
      boost_python::converter_str<GLubyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexImage2D(target, level, internalformat, width, height, border,
        format, type, pixels);
    }
    else if (type == GL_UNSIGNED_BYTE) {
      boost_python::converter_str<GLbyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexImage2D(target, level, internalformat, width, height, border,
        format, type, pixels);
    }
    else {
      throw std::runtime_error(
        "Conversion not implemented for given GLenum type:"
        " glTexImage2D(): const GLvoid* pixels");
    }
  }

  void
  gl_TexParameterf(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glTexParameterf(target, pname, param);
  }

  void
  gl_TexParameteri(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glTexParameteri(target, pname, param);
  }

  void
  gl_TexParameterfv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLfloat> params_proxy(
      "params", py_params, 0, true);
    const GLfloat* params = params_proxy.get();
    glTexParameterfv(target, pname, params);
  }

  void
  gl_TexParameteriv(
    boost::python::object const& py_target,
    boost::python::object const& py_pname,
    boost::python::object const& py_params)
  {
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost_python::converter<GLint> params_proxy(
      "params", py_params, 0, true);
    const GLint* params = params_proxy.get();
    glTexParameteriv(target, pname, params);
  }

  void
  gl_TexSubImage1D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_xoffset,
    boost::python::object const& py_width,
    boost::python::object const& py_format,
    boost::python::object const& py_type,
    boost::python::object const& py_pixels)
  {
  
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLint> xoffset_proxy(py_xoffset);
    GLint xoffset = xoffset_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    if      (type == GL_BYTE) {
      boost_python::converter_str<GLubyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    }
    else if (type == GL_UNSIGNED_BYTE) {
      boost_python::converter_str<GLbyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    }
    else {
      throw std::runtime_error(
        "Conversion not implemented for given GLenum type:"
        " glTexSubImage1D(): const GLvoid* pixels");
    }
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_13()
  {
    using namespace boost::python;
    def("glTexCoord4dv", gl_TexCoord4dv, (
      arg("v")));
    def("glTexCoord4fv", gl_TexCoord4fv, (
      arg("v")));
    def("glTexCoord4iv", gl_TexCoord4iv, (
      arg("v")));
    def("glTexCoord4sv", gl_TexCoord4sv, (
      arg("v")));
    def("glTexCoordPointer", gl_TexCoordPointer, (
      arg("size"), arg("type"), arg("stride"), arg("pointer")));
    def("glTexEnvf", gl_TexEnvf, (
      arg("target"), arg("pname"), arg("param")));
    def("glTexEnvi", gl_TexEnvi, (
      arg("target"), arg("pname"), arg("param")));
    def("glTexEnvfv", gl_TexEnvfv, (
      arg("target"), arg("pname"), arg("params")));
    def("glTexEnviv", gl_TexEnviv, (
      arg("target"), arg("pname"), arg("params")));
    def("glTexGend", gl_TexGend, (
      arg("coord"), arg("pname"), arg("param")));
    def("glTexGenf", gl_TexGenf, (
      arg("coord"), arg("pname"), arg("param")));
    def("glTexGeni", gl_TexGeni, (
      arg("coord"), arg("pname"), arg("param")));
    def("glTexGendv", gl_TexGendv, (
      arg("coord"), arg("pname"), arg("params")));
    def("glTexGenfv", gl_TexGenfv, (
      arg("coord"), arg("pname"), arg("params")));
    def("glTexGeniv", gl_TexGeniv, (
      arg("coord"), arg("pname"), arg("params")));
    def("glTexImage1D", gl_TexImage1D, (
      arg("target"), arg("level"), arg("internalformat"), arg("width"),
      arg("border"), arg("format"), arg("type"), arg("pixels")));
    def("glTexImage2D", gl_TexImage2D, (
      arg("target"), arg("level"), arg("internalformat"), arg("width"),
      arg("height"), arg("border"), arg("format"), arg("type"),
      arg("pixels")));
    def("glTexParameterf", gl_TexParameterf, (
      arg("target"), arg("pname"), arg("param")));
    def("glTexParameteri", gl_TexParameteri, (
      arg("target"), arg("pname"), arg("param")));
    def("glTexParameterfv", gl_TexParameterfv, (
      arg("target"), arg("pname"), arg("params")));
    def("glTexParameteriv", gl_TexParameteriv, (
      arg("target"), arg("pname"), arg("params")));
    def("glTexSubImage1D", gl_TexSubImage1D, (
      arg("target"), arg("level"), arg("xoffset"), arg("width"), arg("format"),
      arg("type"), arg("pixels")));
  }

}}} // namespace gltbx::gl::boost_python
