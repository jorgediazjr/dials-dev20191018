/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_MultMatrixf(
    boost::python::object const& py_m)
  {
    boost_python::converter<GLfloat> m_proxy(
      "m", py_m, 0, true);
    const GLfloat* m = m_proxy.get();
    glMultMatrixf(m);
  }

  void
  gl_NewList(
    boost::python::object const& py_list,
    boost::python::object const& py_mode)
  {
    boost::python::extract<GLuint> list_proxy(py_list);
    GLuint list = list_proxy();
    boost::python::extract<GLenum> mode_proxy(py_mode);
    GLenum mode = mode_proxy();
    glNewList(list, mode);
  }

  void
  gl_EndList()
  {
    glEndList();
  }

  void
  gl_Normal3b(
    boost::python::object const& py_nx,
    boost::python::object const& py_ny,
    boost::python::object const& py_nz)
  {
    boost::python::extract<GLbyte> nx_proxy(py_nx);
    GLbyte nx = nx_proxy();
    boost::python::extract<GLbyte> ny_proxy(py_ny);
    GLbyte ny = ny_proxy();
    boost::python::extract<GLbyte> nz_proxy(py_nz);
    GLbyte nz = nz_proxy();
    glNormal3b(nx, ny, nz);
  }

  void
  gl_Normal3d(
    boost::python::object const& py_nx,
    boost::python::object const& py_ny,
    boost::python::object const& py_nz)
  {
    boost::python::extract<GLdouble> nx_proxy(py_nx);
    GLdouble nx = nx_proxy();
    boost::python::extract<GLdouble> ny_proxy(py_ny);
    GLdouble ny = ny_proxy();
    boost::python::extract<GLdouble> nz_proxy(py_nz);
    GLdouble nz = nz_proxy();
    glNormal3d(nx, ny, nz);
  }

  void
  gl_Normal3f(
    boost::python::object const& py_nx,
    boost::python::object const& py_ny,
    boost::python::object const& py_nz)
  {
    boost::python::extract<GLfloat> nx_proxy(py_nx);
    GLfloat nx = nx_proxy();
    boost::python::extract<GLfloat> ny_proxy(py_ny);
    GLfloat ny = ny_proxy();
    boost::python::extract<GLfloat> nz_proxy(py_nz);
    GLfloat nz = nz_proxy();
    glNormal3f(nx, ny, nz);
  }

  void
  gl_Normal3i(
    boost::python::object const& py_nx,
    boost::python::object const& py_ny,
    boost::python::object const& py_nz)
  {
    boost::python::extract<GLint> nx_proxy(py_nx);
    GLint nx = nx_proxy();
    boost::python::extract<GLint> ny_proxy(py_ny);
    GLint ny = ny_proxy();
    boost::python::extract<GLint> nz_proxy(py_nz);
    GLint nz = nz_proxy();
    glNormal3i(nx, ny, nz);
  }

  void
  gl_Normal3s(
    boost::python::object const& py_nx,
    boost::python::object const& py_ny,
    boost::python::object const& py_nz)
  {
    boost::python::extract<GLshort> nx_proxy(py_nx);
    GLshort nx = nx_proxy();
    boost::python::extract<GLshort> ny_proxy(py_ny);
    GLshort ny = ny_proxy();
    boost::python::extract<GLshort> nz_proxy(py_nz);
    GLshort nz = nz_proxy();
    glNormal3s(nx, ny, nz);
  }

  void
  gl_Normal3bv(
    boost::python::object const& py_v)
  {
    boost_python::converter_str<GLbyte> v_proxy(
      "v", py_v, 3, true);
    const GLbyte* v = v_proxy.get();
    glNormal3bv(v);
  }

  void
  gl_Normal3dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 3, true);
    const GLdouble* v = v_proxy.get();
    glNormal3dv(v);
  }

  void
  gl_Normal3fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 3, true);
    const GLfloat* v = v_proxy.get();
    glNormal3fv(v);
  }

  void
  gl_Normal3iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 3, true);
    const GLint* v = v_proxy.get();
    glNormal3iv(v);
  }

  void
  gl_Normal3sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 3, true);
    const GLshort* v = v_proxy.get();
    glNormal3sv(v);
  }

  void
  gl_NormalPointer(
    boost::python::object const& py_type,
    boost::python::object const& py_stride,
    boost::python::object const& py_pointer)
  {
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    boost::python::extract<GLsizei> stride_proxy(py_stride);
    GLsizei stride = stride_proxy();
    throw std::runtime_error(
      "Conversion not implemented:"
      " glNormalPointer(): const GLvoid* pointer");
  //  const GLvoid* pointer = 0;
  //  glNormalPointer(type, stride, pointer);
  }

  void
  gl_Ortho(
    boost::python::object const& py_left,
    boost::python::object const& py_right,
    boost::python::object const& py_bottom,
    boost::python::object const& py_top,
    boost::python::object const& py_zNear,
    boost::python::object const& py_zFar)
  {
    boost::python::extract<GLdouble> left_proxy(py_left);
    GLdouble left = left_proxy();
    boost::python::extract<GLdouble> right_proxy(py_right);
    GLdouble right = right_proxy();
    boost::python::extract<GLdouble> bottom_proxy(py_bottom);
    GLdouble bottom = bottom_proxy();
    boost::python::extract<GLdouble> top_proxy(py_top);
    GLdouble top = top_proxy();
    boost::python::extract<GLdouble> zNear_proxy(py_zNear);
    GLdouble zNear = zNear_proxy();
    boost::python::extract<GLdouble> zFar_proxy(py_zFar);
    GLdouble zFar = zFar_proxy();
    glOrtho(left, right, bottom, top, zNear, zFar);
  }

  void
  gl_PassThrough(
    boost::python::object const& py_token)
  {
    boost::python::extract<GLfloat> token_proxy(py_token);
    GLfloat token = token_proxy();
    glPassThrough(token);
  }

  void
  gl_PixelMapfv(
    boost::python::object const& py_map,
    boost::python::object const& py_mapsize,
    boost::python::object const& py_values)
  {
    boost::python::extract<GLenum> map_proxy(py_map);
    GLenum map = map_proxy();
    boost::python::extract<GLsizei> mapsize_proxy(py_mapsize);
    GLsizei mapsize = mapsize_proxy();
    boost_python::converter<GLfloat> values_proxy(
      "values", py_values, 0, true);
    const GLfloat* values = values_proxy.get();
    glPixelMapfv(map, mapsize, values);
  }

  void
  gl_PixelMapuiv(
    boost::python::object const& py_map,
    boost::python::object const& py_mapsize,
    boost::python::object const& py_values)
  {
    boost::python::extract<GLenum> map_proxy(py_map);
    GLenum map = map_proxy();
    boost::python::extract<GLsizei> mapsize_proxy(py_mapsize);
    GLsizei mapsize = mapsize_proxy();
    boost_python::converter<GLuint> values_proxy(
      "values", py_values, 0, true);
    const GLuint* values = values_proxy.get();
    glPixelMapuiv(map, mapsize, values);
  }

  void
  gl_PixelMapusv(
    boost::python::object const& py_map,
    boost::python::object const& py_mapsize,
    boost::python::object const& py_values)
  {
    boost::python::extract<GLenum> map_proxy(py_map);
    GLenum map = map_proxy();
    boost::python::extract<GLsizei> mapsize_proxy(py_mapsize);
    GLsizei mapsize = mapsize_proxy();
    boost_python::converter<GLushort> values_proxy(
      "values", py_values, 0, true);
    const GLushort* values = values_proxy.get();
    glPixelMapusv(map, mapsize, values);
  }

  void
  gl_PixelStoref(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glPixelStoref(pname, param);
  }

  void
  gl_PixelStorei(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLint> param_proxy(py_param);
    GLint param = param_proxy();
    glPixelStorei(pname, param);
  }

  void
  gl_PixelTransferf(
    boost::python::object const& py_pname,
    boost::python::object const& py_param)
  {
    boost::python::extract<GLenum> pname_proxy(py_pname);
    GLenum pname = pname_proxy();
    boost::python::extract<GLfloat> param_proxy(py_param);
    GLfloat param = param_proxy();
    glPixelTransferf(pname, param);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_08()
  {
    using namespace boost::python;
    def("glMultMatrixf", gl_MultMatrixf, (
      arg("m")));
    def("glNewList", gl_NewList, (
      arg("list"), arg("mode")));
    def("glEndList", gl_EndList);
    def("glNormal3b", gl_Normal3b, (
      arg("nx"), arg("ny"), arg("nz")));
    def("glNormal3d", gl_Normal3d, (
      arg("nx"), arg("ny"), arg("nz")));
    def("glNormal3f", gl_Normal3f, (
      arg("nx"), arg("ny"), arg("nz")));
    def("glNormal3i", gl_Normal3i, (
      arg("nx"), arg("ny"), arg("nz")));
    def("glNormal3s", gl_Normal3s, (
      arg("nx"), arg("ny"), arg("nz")));
    def("glNormal3bv", gl_Normal3bv, (
      arg("v")));
    def("glNormal3dv", gl_Normal3dv, (
      arg("v")));
    def("glNormal3fv", gl_Normal3fv, (
      arg("v")));
    def("glNormal3iv", gl_Normal3iv, (
      arg("v")));
    def("glNormal3sv", gl_Normal3sv, (
      arg("v")));
    def("glNormalPointer", gl_NormalPointer, (
      arg("type"), arg("stride"), arg("pointer")));
    def("glOrtho", gl_Ortho, (
      arg("left"), arg("right"), arg("bottom"), arg("top"), arg("zNear"),
      arg("zFar")));
    def("glPassThrough", gl_PassThrough, (
      arg("token")));
    def("glPixelMapfv", gl_PixelMapfv, (
      arg("map"), arg("mapsize"), arg("values")));
    def("glPixelMapuiv", gl_PixelMapuiv, (
      arg("map"), arg("mapsize"), arg("values")));
    def("glPixelMapusv", gl_PixelMapusv, (
      arg("map"), arg("mapsize"), arg("values")));
    def("glPixelStoref", gl_PixelStoref, (
      arg("pname"), arg("param")));
    def("glPixelStorei", gl_PixelStorei, (
      arg("pname"), arg("param")));
    def("glPixelTransferf", gl_PixelTransferf, (
      arg("pname"), arg("param")));
  }

}}} // namespace gltbx::gl::boost_python
