/* *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     gltbx.generate_functions_bpl
 */

#include <gltbx/special_wrapper_support.h>
#include <gltbx/pointer_args_bpl.h>
#include <gltbx/error.h>

namespace gltbx { namespace gl { namespace {

  void
  gl_TexSubImage2D(
    boost::python::object const& py_target,
    boost::python::object const& py_level,
    boost::python::object const& py_xoffset,
    boost::python::object const& py_yoffset,
    boost::python::object const& py_width,
    boost::python::object const& py_height,
    boost::python::object const& py_format,
    boost::python::object const& py_type,
    boost::python::object const& py_pixels)
  {
  
    boost::python::extract<GLenum> target_proxy(py_target);
    GLenum target = target_proxy();
    boost::python::extract<GLint> level_proxy(py_level);
    GLint level = level_proxy();
    boost::python::extract<GLint> xoffset_proxy(py_xoffset);
    GLint xoffset = xoffset_proxy();
    boost::python::extract<GLint> yoffset_proxy(py_yoffset);
    GLint yoffset = yoffset_proxy();
    boost::python::extract<GLsizei> width_proxy(py_width);
    GLsizei width = width_proxy();
    boost::python::extract<GLsizei> height_proxy(py_height);
    GLsizei height = height_proxy();
    boost::python::extract<GLenum> format_proxy(py_format);
    GLenum format = format_proxy();
    boost::python::extract<GLenum> type_proxy(py_type);
    GLenum type = type_proxy();
    if      (type == GL_BYTE) {
      boost_python::converter_str<GLubyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexSubImage2D(target, level, xoffset, yoffset, width, height,
        format, type, pixels);
    }
    else if (type == GL_UNSIGNED_BYTE) {
      boost_python::converter_str<GLbyte> pixels_proxy(
        "pixels", py_pixels, 0, true);
      const GLvoid* pixels = reinterpret_cast<const GLvoid*>(
        pixels_proxy.get());
      glTexSubImage2D(target, level, xoffset, yoffset, width, height,
        format, type, pixels);
    }
    else {
      throw std::runtime_error(
        "Conversion not implemented for given GLenum type:"
        " glTexSubImage2D(): const GLvoid* pixels");
    }
  }

  void
  gl_Translated(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    glTranslated(x, y, z);
  }

  void
  gl_Translatef(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    glTranslatef(x, y, z);
  }

  void
  gl_Vertex2d(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    glVertex2d(x, y);
  }

  void
  gl_Vertex2f(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    glVertex2f(x, y);
  }

  void
  gl_Vertex2i(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    glVertex2i(x, y);
  }

  void
  gl_Vertex2s(
    boost::python::object const& py_x,
    boost::python::object const& py_y)
  {
    boost::python::extract<GLshort> x_proxy(py_x);
    GLshort x = x_proxy();
    boost::python::extract<GLshort> y_proxy(py_y);
    GLshort y = y_proxy();
    glVertex2s(x, y);
  }

  void
  gl_Vertex3d(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    glVertex3d(x, y, z);
  }

  void
  gl_Vertex3f(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    glVertex3f(x, y, z);
  }

  void
  gl_Vertex3i(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLint> z_proxy(py_z);
    GLint z = z_proxy();
    glVertex3i(x, y, z);
  }

  void
  gl_Vertex3s(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z)
  {
    boost::python::extract<GLshort> x_proxy(py_x);
    GLshort x = x_proxy();
    boost::python::extract<GLshort> y_proxy(py_y);
    GLshort y = y_proxy();
    boost::python::extract<GLshort> z_proxy(py_z);
    GLshort z = z_proxy();
    glVertex3s(x, y, z);
  }

  void
  gl_Vertex4d(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLdouble> x_proxy(py_x);
    GLdouble x = x_proxy();
    boost::python::extract<GLdouble> y_proxy(py_y);
    GLdouble y = y_proxy();
    boost::python::extract<GLdouble> z_proxy(py_z);
    GLdouble z = z_proxy();
    boost::python::extract<GLdouble> w_proxy(py_w);
    GLdouble w = w_proxy();
    glVertex4d(x, y, z, w);
  }

  void
  gl_Vertex4f(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLfloat> x_proxy(py_x);
    GLfloat x = x_proxy();
    boost::python::extract<GLfloat> y_proxy(py_y);
    GLfloat y = y_proxy();
    boost::python::extract<GLfloat> z_proxy(py_z);
    GLfloat z = z_proxy();
    boost::python::extract<GLfloat> w_proxy(py_w);
    GLfloat w = w_proxy();
    glVertex4f(x, y, z, w);
  }

  void
  gl_Vertex4i(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLint> x_proxy(py_x);
    GLint x = x_proxy();
    boost::python::extract<GLint> y_proxy(py_y);
    GLint y = y_proxy();
    boost::python::extract<GLint> z_proxy(py_z);
    GLint z = z_proxy();
    boost::python::extract<GLint> w_proxy(py_w);
    GLint w = w_proxy();
    glVertex4i(x, y, z, w);
  }

  void
  gl_Vertex4s(
    boost::python::object const& py_x,
    boost::python::object const& py_y,
    boost::python::object const& py_z,
    boost::python::object const& py_w)
  {
    boost::python::extract<GLshort> x_proxy(py_x);
    GLshort x = x_proxy();
    boost::python::extract<GLshort> y_proxy(py_y);
    GLshort y = y_proxy();
    boost::python::extract<GLshort> z_proxy(py_z);
    GLshort z = z_proxy();
    boost::python::extract<GLshort> w_proxy(py_w);
    GLshort w = w_proxy();
    glVertex4s(x, y, z, w);
  }

  void
  gl_Vertex2dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 2, true);
    const GLdouble* v = v_proxy.get();
    glVertex2dv(v);
  }

  void
  gl_Vertex2fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 2, true);
    const GLfloat* v = v_proxy.get();
    glVertex2fv(v);
  }

  void
  gl_Vertex2iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 2, true);
    const GLint* v = v_proxy.get();
    glVertex2iv(v);
  }

  void
  gl_Vertex2sv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLshort> v_proxy(
      "v", py_v, 2, true);
    const GLshort* v = v_proxy.get();
    glVertex2sv(v);
  }

  void
  gl_Vertex3dv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLdouble> v_proxy(
      "v", py_v, 3, true);
    const GLdouble* v = v_proxy.get();
    glVertex3dv(v);
  }

  void
  gl_Vertex3fv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLfloat> v_proxy(
      "v", py_v, 3, true);
    const GLfloat* v = v_proxy.get();
    glVertex3fv(v);
  }

  void
  gl_Vertex3iv(
    boost::python::object const& py_v)
  {
    boost_python::converter<GLint> v_proxy(
      "v", py_v, 3, true);
    const GLint* v = v_proxy.get();
    glVertex3iv(v);
  }

} // namespace <anonymous>

namespace boost_python {

  void
  wrap_functions_14()
  {
    using namespace boost::python;
    def("glTexSubImage2D", gl_TexSubImage2D, (
      arg("target"), arg("level"), arg("xoffset"), arg("yoffset"),
      arg("width"), arg("height"), arg("format"), arg("type"), arg("pixels")));
    def("glTranslated", gl_Translated, (
      arg("x"), arg("y"), arg("z")));
    def("glTranslatef", gl_Translatef, (
      arg("x"), arg("y"), arg("z")));
    def("glVertex2d", gl_Vertex2d, (
      arg("x"), arg("y")));
    def("glVertex2f", gl_Vertex2f, (
      arg("x"), arg("y")));
    def("glVertex2i", gl_Vertex2i, (
      arg("x"), arg("y")));
    def("glVertex2s", gl_Vertex2s, (
      arg("x"), arg("y")));
    def("glVertex3d", gl_Vertex3d, (
      arg("x"), arg("y"), arg("z")));
    def("glVertex3f", gl_Vertex3f, (
      arg("x"), arg("y"), arg("z")));
    def("glVertex3i", gl_Vertex3i, (
      arg("x"), arg("y"), arg("z")));
    def("glVertex3s", gl_Vertex3s, (
      arg("x"), arg("y"), arg("z")));
    def("glVertex4d", gl_Vertex4d, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glVertex4f", gl_Vertex4f, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glVertex4i", gl_Vertex4i, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glVertex4s", gl_Vertex4s, (
      arg("x"), arg("y"), arg("z"), arg("w")));
    def("glVertex2dv", gl_Vertex2dv, (
      arg("v")));
    def("glVertex2fv", gl_Vertex2fv, (
      arg("v")));
    def("glVertex2iv", gl_Vertex2iv, (
      arg("v")));
    def("glVertex2sv", gl_Vertex2sv, (
      arg("v")));
    def("glVertex3dv", gl_Vertex3dv, (
      arg("v")));
    def("glVertex3fv", gl_Vertex3fv, (
      arg("v")));
    def("glVertex3iv", gl_Vertex3iv, (
      arg("v")));
  }

}}} // namespace gltbx::gl::boost_python
